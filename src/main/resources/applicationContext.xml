<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd">
	
	<!-- 使用annotation自动注册bean -->
    <context:annotation-config/>

    <context:component-scan base-package="com.zhangry">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!-- 支持属性占位符设置 -->
    	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:appconfig.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>resource</value>
            </list>
        </property>
        <property name="defaultEncoding" value="utf-8"/>
    </bean>


    <bean id="springContextUtil" class="com.zhangry.common.util.SpringContextUtil" lazy-init="false"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间(毫秒) -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- orcl hibernate settings -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!-- sql方言： 允许 Hibernate 针对特定的关系数据库生成优化的 SQL -->
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">false</prop>

                <!-- 为单向关联（一对一，多对一）的外连接抓取（outer join fetch）树设置最大深度。建议在 0 到 3 之间取值 -->
                <prop key="hibernate.max_fetch_depth">2</prop>

                <!-- 为 Hibernate 关联的批量抓取设置默认数量 建议的取值为 4， 8，和 16 -->
                <prop key="hibernate.default_batch_fetch_size">16</prop>

                <!-- 如果开启，Hibernate 将收集有助于性能调节的统计数据 -->
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>

                <!-- 非零值，指定 JDBC 抓取数量的大小（调用Statement.setFetchSize() ） -->
                <prop key="hibernate.jdbc.fetch_size">100</prop>

                <!-- 非零值，允许 Hibernate 使用 JDBC2 的批量更新。例如： 建议取 5 到 30 之间的值 -->
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <!--<prop key="hibernate.cache.provider_class"></prop>-->

                <!--
                # 设置JDBC事务隔离级别
                # 1：读操作未提交（Read Uncommitted）
                # 2：读操作已提交（Read Committed）
                # 4：可重读（Repeatable Read）
                # 8：可串行化（Serializable）
                -->
                <prop key="hibernate.connection.isolation">2</prop>

                <!-- 如果打开，允许被缓存的 JDBC 连接开启自动提交 -->
                <prop key="hibernate.connection.autocommit">false</prop>

                <prop key="hibernate.autoReconnect">true</prop>

                <!-- 在 SessionFactory 创建时，自动检查数据库
                    结构，或者将数据库 schema 的 DDL 导出
                    到数据库。使用 create-drop 时，在显式关闭
                    SessionFactory 时，将删除掉数据库 schema。 例如： validate | update | create | createdrop -->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.bytecode.provider">javassist</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>${uc.entity.package}</value>
            </list>
        </property>
    </bean>

    <!-- 业务类中的@Transaction注解进行驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 配置事务管理器 指定其作用的sessionFactory把事务交给Spring去处理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 采用XML配置声明式事务-->
    <aop:config>
        <!-- 设置pointCut表示哪些方法要加入事务处理 -->
        <aop:pointcut id="allMethods" expression="execution(* com.zhangry..service..*.*(..))" />
        <!-- 通过advisor来确定具体要加入事务控制的方法 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
            <tx:method name="*" read-only="true" />
            <!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="clear*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="start*" propagation="REQUIRED" />
            <tx:method name="activate*" propagation="REQUIRED" />
            <tx:method name="record*" propagation="REQUIRED" />
            <tx:method name="reset*" propagation="REQUIRED" />
            <tx:method name="regist*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>


    <!-- spring cache support -->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <!-- 声明cacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>

    <!-- 定义EhCacheManager -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- 指定配置文件的位置 -->
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <!-- 指定新建的CacheManager的名称 -->
        <property name="cacheManagerName" value="ehCacheManager"/>
    </bean>

    <!-- 定义一个Ehcache, cacheName: defaultCache  -->
    <bean id="defaultCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager" ref="ehCacheManager"/>
        <property name="cacheName" value="defaultCache"/>
    </bean>

    <!-- 定义一个Ehcache, cacheName: dicCache -->
    <bean id="dicCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager" ref="ehCacheManager"/>
        <property name="cacheName" value="dicCache"/>
    </bean>
</beans>